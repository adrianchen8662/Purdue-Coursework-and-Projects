The following program submission has been recorded:

Student: chen3124
Class: CS159
Section: 13322
Assignment: hw05.c
Submission: 2020-03-20 17:29

If the above is incorrect, you are responsible for resubmitting the assignment or seeking assistance from a course staff member prior to the due date! Assignments will never be accepted by e-mail.

If this is for a lab assignment, only one member must be designated to make a submission for the group.  Graders will not evaluate submissions from multiple group members to determine which effort you actually want graded.

*** Please do not reply to this email ***

The contents of the submission:
     1	
     2	/***************************************************************************
     3	 *
     4	 *  Programmer and Purdue Email Address:
     5	 *  1. chen3124@purdue.edu
     6	 *
     7	 *  Homework #: 05
     8	 *
     9	 *  Academic Integrity Statement:
    10	 *
    11	 *  I have not used source code obtained from any other unauthorized source,
    12	 *  either modified or unmodified.  Neither have I provided access to my code
    13	 *  to another. The effort I am submitting is my own original work.
    14	 *
    15	 *  Day, Time, Location of Lab: Tuesday, 9:30AM, SC189
    16	 *
    17	 *  Program Description: Calculates the time needed to calculate a series of instructions
    18	 *
    19	 ***************************************************************************/
    20	
    21	#include <stdio.h>
    22	#include <math.h>
    23	
    24	long long int getInput();
    25	int splitter(long long int input);
    26	void output(int total);
    27	
    28	int main()
    29	{
    30	  //variable declaration
    31	  int total = 0; //total time needed for calculating
    32	  long long int input = 0; //input integer that represents the instruction
    33	
    34	  //execution statements
    35	  input = getInput();
    36	
    37	  total = splitter(input);
    38	
    39	  output(total);
    40	
    41	  return(0);
    42	}
    43	
    44	/***************************************************************************
    45	*
    46	*  Function Information
    47	*
    48	*  Name of Function: getInput
    49	*
    50	*  Function Return Type: long long int
    51	*
    52	*  Parameters (list data type, name, and comment one per line):
    53	*
    54	*  Function Description: gets the inputted int that represents the instruction
    55	*
    56	***************************************************************************/
    57	
    58	long long int getInput()
    59	{
    60	  //variable delcaration
    61	  long long int input; //stores the input for instructions
    62	
    63	  //execution statements
    64	  printf("Enter instruction to process -> ");
    65	  scanf("%lld", &input);
    66	  return input;
    67	}
    68	
    69	/***************************************************************************
    70	 *
    71	 *  Function Information
    72	 *
    73	 *  Name of Function: splitter
    74	 *
    75	 *  Function Return Type: int
    76	 *
    77	 *  Parameters (list data type, name, and comment one per line):
    78	 *    1. long long int input - The int that represents the instruction
    79	 *
    80	 *  Function Description: Splits the long long int and finds the processing time needed
    81	 *
    82	 ***************************************************************************/
    83	
    84	int splitter (long long int input)
    85	{
    86	  //variable declaration
    87	  int x = 0; //x variable in the two-digit code
    88	  int y = 0; //y variable in the two-digit code
    89	  int total = 0; //total processing time
    90	  int lastdatatype = 0; //the last data type the for loop used
    91	  int length = 0; //the position where the splitter is tracking
    92	  
    93	  //execution statements
    94	  if (input == 0)
    95	  {
    96	    total++;
    97	  }
    98	  for(length = 0;  length <= (1 + log10((double)input)) - 1; length += 2)
    99	  {
   100	    x = input / (int)(pow(10,length + 1)) % 10;
   101	    y = input / (int)(pow(10,length)) % 10;
   102	    switch (x)
   103	    {
   104	      case 1:
   105	        total += 4;
   106	        lastdatatype = 4;
   107	        break;
   108	      case 2:
   109	        total += 5;
   110	        lastdatatype = 5;
   111	        break;
   112	      case 3:
   113	        total += 7;
   114	        lastdatatype = 7;
   115	        break;
   116	      default:
   117	        if (lastdatatype == 0 || y == 0)
   118	        {
   119	          total++;
   120	        }
   121	        else
   122	        {
   123	          total += lastdatatype;
   124	        }
   125	        break;
   126	    }
   127	    if (lastdatatype != 0)
   128	    {
   129	      switch (y)
   130	      {
   131	        case 1:
   132	          total += 1;
   133	          break;
   134	        case 2:
   135	          total += 2;
   136	          break;
   137	        case 3:
   138	          total += 4;
   139	          break;
   140	        case 4:
   141	          total += 6;
   142	          break;
   143	        case 5:
   144	          total += 9;
   145	          break;
   146	      }
   147	    }
   148	  }
   149	  return total;
   150	}
   151	
   152	/***************************************************************************
   153	 *
   154	 *  Function Information
   155	 *
   156	 *  Name of Function: output
   157	 *
   158	 *  Function Return Type: void
   159	 *
   160	 *  Parameters (list data type, name, and comment one per line):
   161	 *    1. int total - the total processing time needed
   162	 *
   163	 *  Function Description: Prints the total time needed for the instructions
   164	 *
   165	 ***************************************************************************/
   166	
   167	void output(int total)
   168	{
   169	  //variable declaration
   170	
   171	  //execution statements
   172	  printf("Total time to process instructions = %d", total);
   173	}
