The following program submission has been recorded:

Student: chen3124
Class: CS159
Section: 13322
Assignment: lab05.c
Submission: 2020-02-25 01:17

If the above is incorrect, you are responsible for resubmitting the assignment or seeking assistance from a course staff member prior to the due date! Assignments will never be accepted by e-mail.

If this is for a lab assignment, only one member must be designated to make a submission for the group.  Graders will not evaluate submissions from multiple group members to determine which effort you actually want graded.

*** Please do not reply to this email ***

The contents of the submission:
     1	
     2	/***************************************************************************
     3	*
     4	*  Programmers and Purdue Email Addresses:
     5	*  1. chen3124@purdue.edu
     6	*  2. joshi99@purdue.edu
     7	*  3. carte277@purdue.edu
     8	*
     9	*  Lab #: 05
    10	*
    11	*  Academic Integrity Statement:
    12	*
    13	*  We have not used source code obtained from any other unauthorized source,
    14	*  either modified or unmodified.  Neither have we provided access to our code
    15	*  to another. The effort we are submitting is our own original work.
    16	*
    17	*  Day, Time, Location of Lab: Tuesday, 9:30AM, SC189
    18	*
    19	*  Program Description: Finds the distance, angle, orthogonal components, force components, net force and angle of net force using charges and two x-y coordinates
    20	*
    21	***************************************************************************/
    22	
    23	#include<stdio.h>
    24	#include<math.h>
    25	#define COULOMB (8.99 * pow(10,9)) //Stores Coulomb's Constant
    26	
    27	//function declaration
    28	double inputCharge(double counter);
    29	void inputCoord(double counter, double *xCoord, double *yCoord);
    30	double distanceFinder(double xvector, double yvector);
    31	double coulombForce(double charge1, double charge2, double radius);
    32	double angleFinder(double xvector, double yvector);
    33	double resultantForce(double xforce, double yforce);
    34	double orthogonalxforce(double angle, double force);
    35	double orthogonalyforce(double angle, double force);
    36	double forceFinder(double netforce, double orthogonalcomponent);
    37	void outputDisplay(double distance12, double angle12, double distance13, double angle13, double orthogonalx12, double orthogonaly12, double orthogonalx13, double orthogonaly13, double forcex, double forcey, double netforce, double netforceangle);
    38	
    39	int main()
    40	{
    41	  //variable declaration
    42	  double charge1; //stores charge 1[micro-Coulomb]
    43	  double charge2; //stores charge 2[micro-Coulomb]
    44	  double charge3; //stores charge 3[micro-Coulomb]
    45	  double xCoord2 = 0; //stores x coordinate of charge 2[cm]
    46	  double yCoord2 = 0; //stores y coordinate of charge 2[cm]
    47	  double xCoord3 = 0; //stores x coordinate of charge 3[cm]
    48	  double yCoord3 = 0; //stores y coordinate of charge 3[cm]
    49	  double distance12; //stores the distance between 1 and 2[cm]
    50	  double angle12 = 0; //stores the angle between 1 and 2[degrees]
    51	  double distance13 = 0; //stores the distance between 1 and 3[cm]
    52	  double angle13 = 0; //stores the angle between 1 and 3[cm]
    53	  double force12 = 0; //stores the force between 1 and 2[N]
    54	  double force13 = 0; //stores the force between 1 and 3[N]
    55	  double orthogonalx12; //stores the x component of 1 and 2 - No units
    56	  double orthogonaly12; //stores the y component of 1 and 2 - No units
    57	  double orthogonalx13; //stores the x component of 1 and 3 - No units
    58	  double orthogonaly13; //stores the y component of 1 and 3 - No units
    59	  double forcex = 0; //stores the net force in the x direction[N]
    60	  double forcey = 0; //stores the net force in the y direction[N]
    61	  double netforce; //stores the net force[N]
    62	  double netforceangle; //store the net force angle[degrees]
    63	  double counter = 1; //stores a counter for inputs
    64	
    65	  //execution statements
    66	  //asks for charges and increments counter by 1
    67	  charge1 = inputCharge(counter);
    68	  counter++;
    69	  charge2 = inputCharge(counter);
    70	  counter++;
    71	  charge3 = inputCharge(counter);
    72	
    73	  //resets counter, asks for coordinates and increments counter by 1
    74	  counter = 2;
    75	  inputCoord(counter, &xCoord2, &yCoord2);
    76	  counter++;
    77	  inputCoord(counter, &xCoord3, &yCoord3);
    78	  
    79	  //finds the distances and angles between 1 and 2, and 1 and 3
    80	  distance12 = distanceFinder(xCoord2, yCoord2);
    81	  angle12 = angleFinder(xCoord2, yCoord2);
    82	  distance13 = distanceFinder(xCoord3, yCoord3);
    83	  angle13 = angleFinder(xCoord3, yCoord3);
    84	  
    85	  //finds the force between 1 and 2, and 1 and 3 using Coulomb's Law
    86	  force12 = coulombForce(charge1, charge2, distance12);
    87	  force13 = coulombForce(charge1, charge3, distance13);
    88	  
    89	  //finds the orthogonal ratio for x and y between 1 and 2, and 1 and 3
    90	  orthogonalx12 = orthogonalxforce(angle12, force12);
    91	  orthogonaly12 = orthogonalyforce(angle12, force12);
    92	  orthogonalx13 = orthogonalxforce(angle13, force13);
    93	  orthogonaly13 = orthogonalyforce(angle13, force13);
    94	
    95	  //finds the net forces in the x and y direction
    96	  forcex = forceFinder(orthogonalx12, force12) + forceFinder(orthogonalx13, force13);
    97	  forcey = forceFinder(orthogonaly12, force12) + forceFinder(orthogonaly13, force13);
    98	  
    99	  //finds the net force and net force angle
   100	  netforce = distanceFinder(forcex, forcey);
   101	  netforceangle = angleFinder(forcex, forcey);
   102	
   103	  //sends the neccessary outputs to be displayed
   104	  outputDisplay(distance12, angle12, distance13, angle13, orthogonalx12, orthogonaly12, orthogonalx13, orthogonaly13, forcex, forcey, netforce, netforceangle);
   105	
   106	  return(0);
   107	}
   108	
   109	/***************************************************************************
   110	*
   111	*  Function Information
   112	*
   113	*  Name of Function: inputCharge
   114	*
   115	*  Function Return Type: double
   116	*
   117	*  Parameters (list data type, name, and comment one per line):
   118	*    1. double counter - counter for which input is being inputted
   119	*
   120	*  Function Description: Gets input for charges
   121	*
   122	***************************************************************************/
   123	
   124	double inputCharge(double counter)
   125	{
   126	  //local variables
   127	  double input; //counter for which input is being inputted
   128	
   129	  //execution statements
   130	  printf("Enter charge [micro-Coulomb] for point #%0.0lf -> ", counter);
   131	  scanf("%lf",&input);
   132	
   133	  return(input);
   134	}
   135	
   136	/***************************************************************************
   137	*
   138	*  Function Information
   139	*
   140	*  Name of Function: inputCoord
   141	*
   142	*  Function Return Type: void
   143	*
   144	*  Parameters (list data type, name, and comment one per line):
   145	*    1. double counter - counter for which input is being inputted 
   146	*    2. double xCoord - stores the x coordinate
   147	*    3. double yCoord - stores the y coordinate
   148	*
   149	*  Function Description: Gets ordered pairs for charge location
   150	*
   151	***************************************************************************/
   152	
   153	void inputCoord(double counter, double *xCoord, double *yCoord)
   154	{
   155	
   156	  //execution statements
   157	  printf("Enter x coordinate [cm] of point #%0.0lf -> ", counter);
   158	  scanf("%lf",xCoord);
   159	  printf("Enter y coordinate [cm] of point #%0.0lf -> ", counter);
   160	  scanf("%lf",yCoord);
   161	}
   162	
   163	/***************************************************************************
   164	*
   165	*  Function Information
   166	*
   167	*  Name of Function: distanceFinder
   168	*
   169	*  Function Return Type: double
   170	*
   171	*  Parameters (list data type, name, and comment one per line):
   172	*    1. double xvector - takes in a vector
   173	*    2. double yvector - takes in another vector
   174	*
   175	*  Function Description: Finds the distance between two points
   176	*
   177	***************************************************************************/
   178	
   179	double distanceFinder(double xvector, double yvector)
   180	{
   181	  //local variables
   182	  double distance; //stores the distance calculated[cm]
   183	
   184	  //execution statements
   185	  distance = sqrt(pow(xvector, 2) + pow(yvector, 2));
   186	
   187	  return distance;
   188	}
   189	
   190	/***************************************************************************
   191	*
   192	*  Function Information
   193	*
   194	*  Name of Function: coulombForce
   195	*
   196	*  Function Return Type: double
   197	*
   198	*  Parameters (list data type, name, and comment one per line):
   199	*    1. double charge1 - charge of particle 2
   200	*    2. double charge2 - charge of particle 2
   201	*    3. double radius - distance between charge 1 and charge 2
   202	*
   203	*  Function Description: finds the force between to particles using Coulomb's Law
   204	*
   205	***************************************************************************/
   206	
   207	double coulombForce(double charge1, double charge2, double radius)
   208	{
   209	  //local variables
   210	  double force; //stores the force calculated[N]
   211	  
   212	  //execution statements
   213	  charge1 = fabs(charge1 * pow(10,-6));
   214	  charge2 = fabs(charge2 * pow(10,-6));
   215	  radius = radius / 100;
   216	
   217	  force = COULOMB * (charge1 * charge2) / pow(radius, 2);
   218	
   219	  return(force);
   220	}
   221	
   222	/***************************************************************************
   223	*
   224	*  Function Information
   225	*
   226	*  Name of Function: angleFinder
   227	*
   228	*  Function Return Type: double
   229	*
   230	*  Parameters (list data type, name, and comment one per line):
   231	*    1. double xvector - takes in a vector
   232	*    2. double yvector - takes in another vector
   233	*
   234	*  Function Description: Finds the angle between two vectors
   235	*
   236	***************************************************************************/
   237	
   238	double angleFinder(double xvector, double yvector)
   239	{
   240	  //local variables
   241	  double angle; //stores the angle calculated[degrees]
   242	
   243	  //execution statements
   244	  angle = (180 / M_PI) * atan(yvector / xvector);
   245	  
   246	  return(angle);
   247	}
   248	
   249	/***************************************************************************
   250	*
   251	*  Function Information
   252	*
   253	*  Name of Function: orthogonalxforce
   254	*
   255	*  Function Return Type: double
   256	*
   257	*  Parameters (list data type, name, and comment one per line):
   258	*    1. double angle - angle between two particles
   259	*    2. double force - force obtained from Coulomb's Law
   260	*
   261	*  Function Description: Finds the orthogonal ratio in the x direction
   262	*
   263	***************************************************************************/
   264	
   265	double orthogonalxforce(double angle, double force)
   266	{
   267	  //local variables
   268	  double orthogonalx; //stores the orthogonal ratio in the x direction[unitless]
   269	  
   270	  //execution statements
   271	  orthogonalx = cos(angle * (M_PI / 180));
   272	
   273	  return orthogonalx;
   274	}
   275	
   276	/***************************************************************************
   277	*
   278	*  Function Information:
   279	*
   280	*  Name of Function: orthogonalyforce
   281	*
   282	*  Function Return Type: double
   283	*
   284	*  Parameters (list data type, name, and comment one per line):
   285	*    1. double angle - angle between two particles
   286	*    2. double force - force obtained from Coulomb's Law
   287	*
   288	*  Function Description: Finds the orthogonal ratio in the y direction
   289	*
   290	***************************************************************************/
   291	
   292	double orthogonalyforce(double angle, double force)
   293	{
   294	  //local variables
   295	  double orthogonaly; //stores the orthogonal ratio in the y direction[unitless]
   296	  
   297	  //execution statements
   298	  orthogonaly = sin(angle * (M_PI / 180));
   299	
   300	  return orthogonaly;
   301	}
   302	
   303	/***************************************************************************
   304	*
   305	*  Function Information
   306	*
   307	*  Name of Function: forceFinder
   308	*
   309	*  Function Return Type: double
   310	*
   311	*  Parameters (list data type, name, and comment one per line):
   312	*    1. double force - force to be split into components
   313	*    2. double orthogonalcomponent - ratio to be multiplied
   314	*
   315	*  Function Description: Finds the x or y component to forces
   316	*
   317	***************************************************************************/
   318	
   319	double forceFinder(double force, double orthogonalcomponent)
   320	{
   321	  //local variables
   322	  double forceoutput; //stores the force[N]
   323	
   324	  //execution statements
   325	  forceoutput = force * orthogonalcomponent;
   326	
   327	  return forceoutput;
   328	}
   329	
   330	/***************************************************************************
   331	*
   332	*  Function Information
   333	*
   334	*  Name of Function: outputDisplay
   335	*
   336	*  Function Return Type: void
   337	*
   338	*  Parameters (list data type, name, and comment one per line):
   339	*    1. double distance12 - distance between point 1 and 2
   340	*    2. double angle12 - angle between point 1 and 2
   341	*    3. double distance13 - distance between point 1 and 3
   342	*    4. double angle13 - angle between point 1 and 3
   343	*    5. double orthogonalx12 - orthogonal x ratio between point 1 and 2
   344	*    6. double orthogonaly12 - orthogonal y ratio between point 1 and 2
   345	*    7. double orthogonalx13 - orthogonal x ratio between point 1 and 3
   346	*    8. double orthogonaly13 - orthogonal y ratio between point 1 and 3
   347	*    9. double forcex - force in the x component
   348	*    10. double forcey - force in the y component
   349	*    11. double netforce - net force
   350	*    12. double netforceangle - net force angle
   351	*
   352	*  Function Description: Output's the variables required
   353	*
   354	***************************************************************************/
   355	
   356	void outputDisplay(double distance12, double angle12, double distance13, double angle13, double orthogonalx12, double orthogonaly12, double orthogonalx13, double orthogonaly13, double forcex, double forcey, double netforce, double netforceangle)
   357	{
   358	  //execution statements
   359	  printf("Distance [cm] and Angle [degrees] from point 1 to 2: %0.1lf, %0.1lf", distance12, angle12);
   360	  printf("\nDistance [cm] and Angle [degrees] from point 1 to 3: %0.1lf, %0.1lf", distance13, angle13);
   361	  printf("\n\nOrthogonal components point 1 to point 2 [x, y]: %0.3lf, %0.3lf", orthogonalx12, orthogonaly12);
   362	  printf("\nOrthogonal components point 1 to point 3 [x, y]: %0.3lf, %0.3lf", orthogonalx13, orthogonaly13);
   363	  printf("\n\nForce [N] of x and y direction: %0.3lf, %0.3lf", forcex, forcey);
   364	  printf("\nNet force [N] and angle [degrees]: %0.3lf, %0.1lf\n", netforce, netforceangle);
   365	}
